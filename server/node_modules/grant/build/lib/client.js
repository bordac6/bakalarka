'use strict';

var compose = require('request-compose');
var Request = compose.Request;
var Response = compose.Response;
Request.oauth = require('request-oauth');
var qs = require('qs');

module.exports = function (args) {
  return compose(Request.defaults(args), function () {
    return args.url ? Request.url(args.url) : function (_ref) {
      var options = _ref.options;
      return { options };
    };
  }(), function () {
    return args.qs ? Request.qs(args.qs) : function (_ref2) {
      var options = _ref2.options;
      return { options };
    };
  }(), function () {
    return args.form ? Request.form(args.form) : args.json ? Request.json(args.json) : args.body ? Request.body(args.body) : function (_ref3) {
      var options = _ref3.options,
          body = _ref3.body;
      return { options, body };
    };
  }(), function () {
    return args.auth ? Request.auth(args.auth) : args.oauth ? Request.oauth(args.oauth) : function (_ref4) {
      var options = _ref4.options,
          body = _ref4.body;
      return { options, body };
    };
  }(), function () {
    return function (_ref5) {
      var options = _ref5.options,
          body = _ref5.body;
      return body ? Request.length()({ options, body }) : { options };
    };
  }(), Request.send(), Response.buffer(),
  // Response.parse(),
  // use qs instead of querystring for nested objects
  function (_ref6) {
    var res = _ref6.res,
        headers = _ref6.res.headers,
        body = _ref6.body;

    var header = Object.keys(headers).find(function (name) {
      return name.toLowerCase() === 'content-type';
    });

    var raw = body;

    if (/json|javascript/.test(headers[header])) {
      try {
        body = JSON.parse(body);
      } catch (err) {}
    } else if (/application\/x-www-form-urlencoded/.test(headers[header])) {
      try {
        body = qs.parse(body);
      } catch (err) {}
    }

    // some providers return wrong `content-type` like: text/html or text/plain
    else {
        try {
          body = JSON.parse(body);
        } catch (err) {
          body = qs.parse(body);
        }
      }

    // log({json: body})

    return { res, body, raw };
  }, Response.status())();
};